// SCSS Variables
$tree-padding: 20px 5px 0 5px;
$tree-connector-height: 20px;
$tree-border-radius: 5px;
$tree-connector-width: 1px;
$mobile-breakpoint: 768px;
$mobile-connector-height: 16px;
$dashed-line-segment: 10px;
$dashed-line-gap: 20px;

// Mixins
@mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
}

@mixin tree-connector($border-side: top) {
    content: '';
    position: absolute;
    top: 0;
    width: 50%;
    height: $tree-connector-height;

    @if $border-side == top {
        border-top: $tree-connector-width solid var(--flow-border-color);
    } @else if $border-side == left {
        border-left: $tree-connector-width solid var(--flow-border-color);
    }
}

@mixin hide-connectors {
    &::before,
    &::after {
        display: none;
    }
}

// Tree Component Styles
.tree {
    // Family container
    > ul > li > .family > ul {
        display: flex;
        flex-wrap: nowrap;
    }

    // Base ul styles
    ul {
        position: relative;
        width: 100%;
        flex-wrap: nowrap;
        display: flex;
    }

    // Base li styles
    li {
        display: inline-block;
        vertical-align: top;
        text-align: center;
        list-style-type: none;
        position: relative;
        padding: $tree-padding;

        // Connector lines using pseudo-elements
        &::before,
        &::after {
            @include tree-connector(top);
            right: 50%;
        }

        &::after {
            right: auto;
            left: 50%;
            @include tree-connector(left);
        }

        // Single child handling
        &:only-child {
            padding-top: 0;

            @include hide-connectors;
        }

        // First and last child connector adjustments
        &:first-child {
            &::before {
                border: 0 none;
            }

            &::after {
                @include border-radius($tree-border-radius 0 0 0);
            }
        }

        &:last-child {
            &::after {
                border: 0 none;
            }

            &::before {
                border-right: $tree-connector-width solid var(--flow-border-color);
                @include border-radius(0 $tree-border-radius 0 0);
            }
        }
    }

    // Mobile responsive styles
    @media (max-width: $mobile-breakpoint) {
        ul {
            flex-direction: column;
            align-items: center;
            flex-wrap: nowrap;
        }

        li {
            display: block;
            width: 100%;
            padding: 0;
            text-align: center;

            @include hide-connectors;
        }

        // Vertical connectors for mobile
        ul {
            &::before,
            &::after {
                left: 50%;
                border-left: $tree-connector-width solid var(--flow-border-color);
                height: $mobile-connector-height;
                width: 0;
                display: block;
            }
        }
    }
}

// Custom flow border component
.custom-flow-border {
    position: relative;

    &::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-image: repeating-linear-gradient(
            to right,
            var(--flow-border-color) 0px,
            var(--flow-border-color) $dashed-line-segment,
            transparent $dashed-line-segment,
            transparent $dashed-line-gap
        );
    }
}
